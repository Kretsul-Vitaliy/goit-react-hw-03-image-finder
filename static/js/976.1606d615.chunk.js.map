{"version":3,"file":"static/js/976.1606d615.chunk.js","mappings":"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","sources":["components/ImageGallery/ImageGallery.styled.jsx","services/PixabayAPI.jsx","components/FetchErrorView/FetchErrorView.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ImageGallery/ImageGallery.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ImageGalleryList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const LoadMoreBox = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 10px auto;\n`;\n","import axios from \"axios\";\n\nasync function FetchPixabayAPI(searchQuery, page, perPage) {\n  try {\n    const response = await axios({\n      method: \"get\",\n      baseURL: \"https://pixabay.com/api/\",\n      timeout: 3000, // 5 секунд тайм-аута\n      // headers: {\n      //   Accept: \"application/json\",\n      //   \"Content-Type\": \"application/json\",\n      // },\n      params: {\n        key: process.env.REACT_APP_PIXABAY_API_KEY,\n        q: `${searchQuery}`,\n        page: `${page}`,\n        image_type: \"photo\",\n        orientation: \"horizontal\",\n        per_page: `${perPage}`,\n        safesearch: true,\n      },\n    });\n    const data = await response.data;\n    // console.log(\"response\", data);\n    return data; //возвращаем ответ с данными запроса! Результатом всей ассинхронной функции будет Promise!!!\n  } catch (error) {\n    if (error.response) {\n      // Когда код состояния ответа выходит за пределы диапазона 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      //Когда не был получен ответ после того, как запрос был сделан\n      console.log(error.request);\n    } else {\n      // Ошибка\n      console.log(error.message);\n    }\n  }\n}\n\nexport default FetchPixabayAPI;\n\n// async function FetchPixabayAPISearch(name, page) {\n//   const URL = \"https://pixabay.com/api/\";\n//   const API_KEY = \"24457855-696bd2eff11a5d8607ee7122f\";\n//   const controller = new AbortController();\n//   const signal = controller.signal;\n//   const options = {\n//     // method: \"POST\",\n//     signal: signal,\n//     // body: JSON.stringify({\n//     //   firstName: \"Sabesan\",\n//     //   lastName: \"Sathananthan\",\n//     // }),\n//   };\n//   try {\n//     // const timeoutId = setTimeout(() => controller.abort(), 5000);\n//     setTimeout(() => controller.abort(), 1000);\n//     const response = await fetch(\n//       `${URL}?q=${name}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\n//       options\n//     );\n//     if (response.ok) {\n//       return response.json();\n//     }\n//   } catch (error) {\n//     Promise.reject(new Error(\"Ошибка сервера, невозможно получить JSON\"));\n//     // console.error(\"Ошибка сервера, невозможно получить данные\", error);\n//   }\n// }\n// export default FetchPixabayAPISearch;\n\n// axios({\n//   method: \"post\",\n//   url: \"/login\",\n//   timeout: 5000, // 5 секунд тайм-аута\n//   data: {\n//     firstName: \"Sabesan\",\n//     lastName: \"Sathananthan\",\n//   },\n// })\n//   .then((response) => {\n//     /* заголовок ответа */\n//   })\n//   .catch((error) => console.error(\"timeout exceeded\"));\n","import errorImage from \"../../image/error-img-api.webp\";\n\nexport default function FetchErrorView({ message }) {\n  return (\n    <div role=\"alert\" style={{ textAlign: \"center\", margin: \"10px auto\" }}>\n      <img\n        style={{ margin: \"10px auto\" }}\n        src={errorImage}\n        width=\"240\"\n        alt=\"There are no images with this name\"\n      />\n      <p>\n        <b>{message}</b>\n      </p>\n    </div>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const ButtonLoadMore = styled.button`\n  max-width: 250px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 8px 16px;\n  border-radius: 30px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #fff;\n  /* border: 0; */\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  &:hover,\n  &:focus {\n    background-color: #41608f;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ButtonLoadMore } from \"./Button.styled\";\n\nconst Button = ({ children, disabled, active, onClick, ...attrs }) => {\n  return (\n    <ButtonLoadMore {...attrs} disabled={disabled} onClick={onClick}>\n      {children}\n    </ButtonLoadMore>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.node,\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  children: \"Default button\",\n  onClick: () => {},\n  disabled: false,\n  active: false,\n};\n\nexport default Button;\n","import React, { Component, lazy, Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport { ImageGalleryList, LoadMoreBox } from \"./ImageGallery.styled\";\nimport FetchPixabayAPI from \"../../services/PixabayAPI\";\nimport FetchErrorView from \"../FetchErrorView\";\nimport Button from \"../Button/\";\nimport Loader from \"../Loader/\";\n// import ImageGalleryItem from \"../ImageGalleryItem\";\nconst ImageGalleryItem = lazy(() => import(\"../ImageGalleryItem\"));\n\nclass ImageGallery extends Component {\n  state = {\n    page: null,\n    perPage: null,\n    SearchImageArray: [],\n    error: null,\n    status: \"idle\",\n    totalPages: null,\n    totalHits: null,\n  };\n\n  async componentDidUpdate(prevProps, prevState) {\n    const PrevName = prevProps.searchQuery;\n    const NextName = this.props.searchQuery;\n    const PerPageProps = this.props.selectedOption.value;\n    const PropsPage = this.props.page;\n    const NextPage = this.state.page;\n    const PrevPage = prevState.page;\n\n    try {\n      if (PrevName !== NextName) {\n        await this.setState({\n          SearchImageArray: [],\n          page: PropsPage,\n          perPage: PerPageProps,\n          status: \"pending\",\n        });\n        await this.searchPictures();\n        toast.success(\n          await `Найдено ${this.state.totalHits} изображений ${NextName}`,\n          { delay: 200 }\n        );\n      }\n      if (NextPage !== PrevPage && NextPage !== 1) {\n        await this.setState({\n          perPage: PerPageProps,\n          //   status: \"pending\",\n        });\n        await this.searchPictures();\n        //scrollBy прокрутит в нижней точке список\n        //scrollTo прокрутит в верхней точке список\n        await window.scrollBy({\n          //   top: document.documentElement.scrollHeight, //прокрутит весь документ в конец\n          top: 1000,\n          behavior: \"smooth\",\n        });\n        if (this.state.SearchImageArray.length >= this.state.totalHits) {\n          return await toast.info(\n            `Сожалеем, но вы достигли конца списка \\n результатов поиска по ${NextName}.`\n          );\n        }\n      }\n    } catch (error) {\n      //   console.log(error);\n    }\n  }\n  searchPictures = async () => {\n    const NextName = this.props.searchQuery;\n    const NextPage = this.state.page;\n    const PerPageState = this.state.perPage;\n    const PicturesArray = FetchPixabayAPI(NextName, NextPage, PerPageState);\n    // console.log(PicturesArray); // promise\n    // PicturesArray.then((resolve) => console.log(\"HITS\", resolve.hits));    // resolve результат промиса вытягиваем обьект\n    // const TEST = FetchPixabayAPI(\"cat\", 10, 12); //выполнение функции с введенными данными\n    // TEST.then((res) => console.log(\"HITS\", res.hits)); //вытягиваем из функции обьекта, обьект с данными hits\n    // TEST.then((res) => console.log(\"TOTAL\", res.total)); //вытягиваем из функции обьекта значение total\n    // TEST.then((res) => console.log(\"TOTALHITS\", res.totalHits)); //вытягиваем из функции обьекта значение totalHits\n\n    await PicturesArray.then((resolve) => {\n      const picturesArray = resolve.hits.map(\n        ({ id, tags, webformatURL, largeImageURL }) => {\n          return { id, tags, webformatURL, largeImageURL };\n        }\n      ); // вытягиваем из массива нужные данные для создания нового массива с данными которые будем использовать\n      //   console.log(\"picturesArray\", picturesArray);\n\n      //первый вариант записи\n      //   this.setState((prevState) => ({\n      //     SearchImageArray: [...prevState.SearchImageArray, ...picturesArray],\n      //   }));\n      //   this.setState({\n      //     status: \"resolved\",\n      //     error: null,\n      //     // resolve.totalHits - переменная количества найденных фото для API это максимальное количество\n      //     totalHits: resolve.totalHits,\n      //     totalPages: Math.ceil(resolve.totalHits / PerPageState), //получаем общее количество страниц\n      //   });\n\n      //второй вариант записи с одним setState\n      this.setState((prevState) => {\n        return {\n          status: \"resolved\",\n          SearchImageArray: [...prevState.SearchImageArray, ...picturesArray],\n          error: null,\n          // resolve.totalHits - переменная количества найденных фото для API это максимальное количество\n          totalHits: resolve.totalHits,\n          totalPages: Math.ceil(resolve.totalHits / PerPageState), //получаем общее количество страниц\n        };\n      });\n\n      if (picturesArray.length === 0) {\n        // return toast.error(\"There is no picture with that name!\");\n        return Promise.reject(new Error(`Try another name: ${NextName}`));\n      }\n    }).catch((error) =>\n      this.setState({ status: \"rejected\", error: error.message })\n    );\n  };\n  // метод добавления page в state из предыдущего стейта +1\n  handleLoadMoreButton = async () => {\n    try {\n      await this.setState((prevState) => {\n        return { page: prevState.page + 1 };\n      });\n    } catch (error) {}\n  };\n\n  render() {\n    const { SearchImageArray, error, status, totalHits } = this.state;\n    // применяем метод state mashine где:\n    // \"idle\"- простой,\n    // \"pending\" - ожидаеться,\n    // \"rejected\" - отклонено,\n    // \"resolved\" - выполнился\n    if (status === \"idle\") {\n      return (\n        <div style={{ textAlign: \"center\", fontSize: \"larger\" }}>\n          Введите <b>имя</b> и заполните поле <b>per page</b>, <br />\n          для определиния количества результатов на странице.\n        </div>\n      );\n    }\n    if (status === \"pending\") {\n      // return <div>Загружаем...</div>;\n      return <Loader />;\n    }\n\n    if (status === \"rejected\") {\n      return <FetchErrorView message={error} />;\n    }\n    if (status === \"resolved\") {\n      return (\n        <>\n          <Suspense\n            fallback={\n              <div>\n                Loading...\n                <Loader />\n              </div>\n            }\n          >\n            <ImageGalleryList SearchImageArray={SearchImageArray}>\n              {SearchImageArray.map(\n                ({ id, webformatURL, largeImageURL, tags }) => {\n                  return (\n                    <ImageGalleryItem\n                      key={id}\n                      webformatURL={webformatURL}\n                      largeImageURL={largeImageURL}\n                      tags={tags}\n                    />\n                  );\n                }\n              )}\n            </ImageGalleryList>\n            {status === \"pending\" && <Loader />}\n            {SearchImageArray.length < totalHits && (\n              <LoadMoreBox>\n                <Button\n                  type=\"button\"\n                  active={true}\n                  disabled={false}\n                  onClick={this.handleLoadMoreButton}\n                >\n                  Load More\n                </Button>\n              </LoadMoreBox>\n            )}\n          </Suspense>\n        </>\n      );\n    }\n    // return <div></div>;\n  }\n}\nImageGallery.propTypes = {\n  SearchImageArray: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      largeImageURL: PropTypes.string,\n      tags: PropTypes.string,\n      webformatURL: PropTypes.string,\n    })\n  ),\n};\nexport default ImageGallery;\n"],"names":["ImageGalleryList","styled","LoadMoreBox","FetchPixabayAPI","searchQuery","page","perPage","axios","method","baseURL","timeout","params","key","process","q","image_type","orientation","per_page","safesearch","response","data","console","log","status","headers","request","message","FetchErrorView","role","style","textAlign","margin","src","errorImage","width","alt","ButtonLoadMore","Button","children","disabled","onClick","active","attrs","defaultProps","ImageGalleryItem","lazy","ImageGallery","state","SearchImageArray","error","totalPages","totalHits","searchPictures","NextName","props","NextPage","PerPageState","PicturesArray","then","resolve","picturesArray","hits","map","id","tags","webformatURL","largeImageURL","setState","prevState","Math","ceil","length","Promise","reject","Error","catch","handleLoadMoreButton","prevProps","PrevName","this","PerPageProps","selectedOption","value","PropsPage","PrevPage","toast","delay","success","window","scrollBy","top","behavior","fontSize","Loader","Suspense","fallback","type","Component"],"sourceRoot":""}