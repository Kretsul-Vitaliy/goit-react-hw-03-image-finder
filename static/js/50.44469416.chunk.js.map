{"version":3,"file":"static/js/50.44469416.chunk.js","mappings":"gRAEaA,EAAsBC,EAAAA,GAAAA,GAAH,kLAKnBC,EAAwBD,EAAAA,GAAAA,IAAH,kN,UCLrBE,EAAeF,EAAAA,GAAAA,IAAH,uOAYZG,EAAWH,EAAAA,GAAAA,IAAH,mN,SCRfI,EAAYC,SAASC,cAAc,eAEnCC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAiCH,OAjCGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAiBJC,eAAiB,SAACC,GACG,WAAfA,EAAMC,MACR,EAAKC,MAAMC,WAEd,EACDC,gBAAkB,SAACJ,GACbA,EAAMK,SAAWL,EAAMM,eACzB,EAAKJ,MAAMC,WAEd,EACDI,cAAgB,SAACC,GACA,cAAXA,EAAEP,KACJ,EAAKC,MAAMO,SACS,eAAXD,EAAEP,MACX,EAAKC,MAAMQ,WAEd,EAaA,OAbA,yCA3BD,WAEEC,OAAOC,iBAAiB,UAAWC,KAAKd,kBACzC,kCACD,WAEEY,OAAOG,oBAAoB,UAAWD,KAAKd,kB,oBAsB7C,WACE,OAAOgB,EAAAA,EAAAA,eACL,SAACtB,EAAD,CAAcuB,QAASH,KAAKT,gBAA5B,UACE,SAACV,EAAD,UAEGmB,KAAKX,MAAMe,aAKhBtB,OAEH,EA9CGG,CAAcoB,EAAAA,WAiDpB,ICjDMC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAOH,OAPGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAQ,CACNC,aAAa,GADP,EAIRC,YAAc,WACZ,EAAKC,UAAS,SAACH,GAAD,MAAY,CAAEC,aAAcD,EAAMC,iBACjD,EAmBA,OAnBA,8BACD,WACE,MAA8CR,KAAKX,MAA3CsB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,cACpBL,EAAgBR,KAAKO,MAArBC,YACR,OACE,UAAC/B,EAAD,YACE,SAACE,EAAD,CACEmC,IAAKH,EACLI,IAAKH,EACLT,QAASH,KAAKS,cAGfD,IACC,SAAC,EAAD,CAAOlB,QAASU,KAAKS,YAArB,UACE,gBAAKK,IAAKD,EAAeE,IAAKH,aAKvC,EA1BGN,CAAyBD,EAAAA,WAgC/B","sources":["components/ImageGalleryItem/ImageGalleryItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ImageGalleryItemBox = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const ImageGalleryItemImage = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const OverlayModal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\nexport const ModalBox = styled.div`\n  /* max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px); */\n  /* overflow: auto; */\n  img {\n    max-width: calc(100vw - 48px);\n    max-height: calc(100vh - 24px);\n  }\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createPortal } from \"react-dom\";\nimport { OverlayModal, ModalBox } from \"./Modal.styled\";\n// import ReactDOM from \"react-dom\";\n// const modalRoot = document.getElementById(\"#modal-root\");\nconst modalRoot = document.querySelector(\"#modal-root\");\n\nclass Modal extends Component {\n  //   constructor(props) {\n  //     super(props);\n  //   }\n  //   state = {};\n  //   modalRoot = document.createElement(\"div\");\n  componentDidMount() {\n    // document.body.appendChild(this.modalRoot);\n    window.addEventListener(\"keydown\", this.closeOnKeydown);\n  }\n  componentWillUnmount() {\n    // document.body.removeChild(this.modalRoot);\n    window.removeEventListener(\"keydown\", this.closeOnKeydown);\n  }\n  //   render() {\n  //     return ReactDOM.createPortal(this.props.children, this.modalRoot);\n  //   }\n  closeOnKeydown = (event) => {\n    if (event.code === \"Escape\") {\n      this.props.onClose();\n    }\n  };\n  closeOnBackdrop = (event) => {\n    if (event.target === event.currentTarget) {\n      this.props.onClose();\n    }\n  };\n  handleKeyDown = (e) => {\n    if (e.code === \"ArrowLeft\") {\n      this.props.onLeft();\n    } else if (e.code === \"ArrowRight\") {\n      this.props.onRight();\n    }\n  };\n  render() {\n    return createPortal(\n      <OverlayModal onClick={this.closeOnBackdrop}>\n        <ModalBox>\n          {/* <button onClick={this.props.onClose}>CLOSE</button> */}\n          {this.props.children}\n          {/* <img src=\"\" alt=\"\" /> */}\n          {/* <img src={this.props.src} alt={this.props.tags} /> */}\n        </ModalBox>\n      </OverlayModal>,\n      modalRoot\n    );\n  }\n}\n\nexport default Modal;\n\nModal.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  src: PropTypes.string,\n  tags: PropTypes.string,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  ImageGalleryItemBox,\n  ImageGalleryItemImage,\n} from \"./ImageGalleryItem.styled\";\nimport Modal from \"../Modal\";\n\nclass ImageGalleryItem extends Component {\n  state = {\n    isModalOpen: false,\n  };\n  //метод открытия закрытия модального окна\n  toggleModal = () => {\n    this.setState((state) => ({ isModalOpen: !state.isModalOpen }));\n  };\n  render() {\n    const { webformatURL, tags, largeImageURL } = this.props;\n    const { isModalOpen } = this.state;\n    return (\n      <ImageGalleryItemBox>\n        <ImageGalleryItemImage\n          src={webformatURL}\n          alt={tags}\n          onClick={this.toggleModal}\n        />\n        {/* открываем модальное окно с большим изображением если state isModalOpen=true  */}\n        {isModalOpen && (\n          <Modal onClose={this.toggleModal}>\n            <img src={largeImageURL} alt={tags} />\n          </Modal>\n        )}\n      </ImageGalleryItemBox>\n    );\n  }\n}\nImageGalleryItem.propTypes = {\n  toggleModal: PropTypes.func,\n};\n\nexport default ImageGalleryItem;\n"],"names":["ImageGalleryItemBox","styled","ImageGalleryItemImage","OverlayModal","ModalBox","modalRoot","document","querySelector","Modal","closeOnKeydown","event","code","props","onClose","closeOnBackdrop","target","currentTarget","handleKeyDown","e","onLeft","onRight","window","addEventListener","this","removeEventListener","createPortal","onClick","children","Component","ImageGalleryItem","state","isModalOpen","toggleModal","setState","webformatURL","tags","largeImageURL","src","alt"],"sourceRoot":""}